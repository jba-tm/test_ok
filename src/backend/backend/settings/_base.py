"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import json
from pathlib import Path

from django.utils.translation import gettext_lazy as _
from django.core.exceptions import ImproperlyConfigured


PROJECT_NAME = 'backend'


with open(os.path.join(os.path.dirname(__file__), 'secrets.json'), 'r') as f:
    secrets = json.loads(f.read())


def get_secret(setting):
    """Get the secret variable or return explicit exception"""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = f'Set the {setting} environment variable'
        raise ImproperlyConfigured(error_msg)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
PROJECT_DIR = Path(__file__).resolve().parent.parent
# PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR = os.path.dirname(PROJECT_DIR)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = PROJECT_NAME + '.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = PROJECT_NAME+'.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ashgabat'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    'locale/',
    os.path.join(BASE_DIR, 'locale'),
    os.path.join(BASE_DIR, PROJECT_NAME, 'locale'),
]


LANGUAGES = [
    ('en', _('English')),
    ('tk', _('Turkmen')),
    ('ru', _('Russian')),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, PROJECT_NAME, 'static')
]


# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/3.1/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

with open(os.path.join(BASE_DIR, PROJECT_NAME, 'settings', 'last_update.txt'), 'r') as f:
    timestamp = f.readline().strip()
STATIC_URL = f'/static/{timestamp}/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = f'/media/'


# #################################################################
# ################ INTERNAL SETTINGS STARTS #######################
# #################################################################
PENDING_STATUS_TXT = _('Pending')
CANCELED_STATUS_TXT = _('Canceled')
SUBMITTED_STATUS_TXT = _('Submitted')
ENABLE_STATUS_TXT = _('Enable')
DISABLE_STATUS_TXT = _('Disable')


# #########################################
# ############# MESSAGES START ############
# #########################################

ACCESS_PERMISSION_MISS_MSG = _("Sorry, but you don't have permission to perform this action")
NOT_AUTHENTICATE_MSG = _('Authentication credentials were not provided.')
NOT_ACCEPTABLE_MSG = _('')

# #########################################
# ############# MESSAGES END ##############
# #########################################


# ################################################################
# ################ INTERNAL SETTINGS ENDS ########################
# ################################################################


# #################################################################
# ################ LOGGING SETTINGS STARTS ########################
# #################################################################
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'formatters': {
#         'simple': {
#             'format': '[%(asctime)s %(levelname)s: %(message)s',
#             'datefmt': '%d.%m.%Y %H:%M:%S',
#         }
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#         'console_dev': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#             'filters': ['require_debug_true'],
#         },
#         'console_prod': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#         },
#         'file': {
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/app.log'),
#             'maxBytes': 1048576,
#             'backupCount': 10,
#             'formatter': 'simple',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console_dev', 'console_prod', 'console'],
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'ERROR'),
#         },
#         'django.server': {
#             'handlers': ['file'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#     }
# }
# ################################################################
# ################ LOGGING SETTINGS ENDS #########################
# ################################################################
